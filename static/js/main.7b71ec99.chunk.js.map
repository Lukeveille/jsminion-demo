{"version":3,"sources":["media sync /^/.//.*$","media/Adventurer.jpg","media/Artisan.jpg","media/Bandit.jpg","media/Bureaucrat.jpg","media/Cellar.jpg","media/Chancellor.jpg","media/Chapel.jpg","media/Copper.jpg","media/Council_Room.jpg","media/Curse.jpg","media/Duchy.jpg","media/Estate.jpg","media/Feast.jpg","media/Festival.jpg","media/Gardens.jpg","media/Gold.jpg","media/Harbinger.jpg","media/Laboratory.jpg","media/Library.jpg","media/Market.jpg","media/Merchant.jpg","media/Militia.jpg","media/Mine.jpg","media/Moat.jpg","media/Moneylender.jpg","media/Poacher.jpg","media/Province.jpg","media/Remodel.jpg","media/Sentry.jpg","media/Silver.jpg","media/Smithy.jpg","media/Spy.jpg","media/Thief.jpg","media/Throne_Room.jpg","media/Vassal.jpg","media/Village.jpg","media/Witch.jpg","media/Woodcutter.jpg","media/Workshop.jpg","data/cardSets.js","utils/capital.js","utils/printLog.js","utils/shuffle.js","utils/countValue.js","utils/hasAction.js","utils/countTreasure.js","utils/cleanup.js","utils/rollover.js","utils/moveCard.js","components/Card.js","utils/sorting.js","components/CardDisplay.js","components/ActionModal.js","utils/enterBuyPhase.js","components/LogDisplay.js","components/TurnInfo.js","components/TrashButton.js","utils/treasureInHand.js","components/ButtonDisplay.js","utils/instructions.js","components/Modal.js","components/CurrentModal.js","components/StartScreen.js","App.js","utils/parseActionObject.js","utils/autoAction.js","utils/next.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","files","standardGame","extract","data","file","path","filter","name","includes","cardImages","require","cardTypes","allCards","set","victory","cardList","treasure","action","card","str","charAt","toUpperCase","slice","colors","logActions","generateLog","gameState","cards","cardAction","num","actionLog","size","length","end","className","key","uuidv4","turn","turnPlayer","player","type","newLogs","concat","forEach","descriptor","capital","invalid","isNaN","arr","temp","random","newArr","index","Math","floor","hand","value","total","checkHand","turnObject","actions","hasAction","phase","logs","printLog","discardTrashQueue","discardTrashState","deck","discard","newDeck","newHand","splice","newDiscard","shuffle","count","source","dest","newSource","removal","findIndex","sourceCard","movingCards","props","useState","showFullCard","setShowFullCard","altKey","setAltKey","useEffect","empty","queued","supply","onClick","live","trueLimit","limit","stopPropagation","stacked","onMouseOver","onMouseOut","cost","style","backgroundImage","hidden","newText","instructions","remainder","split","beginning","coinValue","shift","join","instructionText","a","b","compare","stacks","cardElements","sort","sorting","treasures","i","j","correctAction","coin","cardQueue","Number","MAX_SAFE_INTEGER","amount","parseInt","reduce","spentCard","restriction","subType","actionSupply","push","Card","title","stack","CardDisplay","accept","buttonText","decline","log","logSticker","document","getElementById","scrollIntoView","victoryPoints","buys","bought","trash","setModalContent","setShowModal","noLimit","modifier","rightAmount","alt","message","plural","treasureInHand","playAllTreasure","discardTrashCards","nextPhase","setDiscardTrashQueue","display","show","setShow","event","close","children","Modal","showModal","modalContent","phaseTitle","start","button","App","setPhase","setDiscardTrashState","setActionSupply","setLogs","setGameState","setDeck","setHand","inPlay","setInPlay","setDiscard","setTrash","setSupply","setBought","setTreasure","setActions","setBuys","emptySupply","setEmptySupply","setVictoryPoints","startGame","startingDeck","startingCards","countValue","allCardTypes","allSupplies","setSupplies","cardType","equation","supplies","setMenuScreen","StartScreen","menuScreen","supplyOn","newCards","rolloverCards","moveCard","countTreasure","rollover","actionObject","discardTrash","actionInfo","next","parseActionObject","checkHandForActions","cardLive","ActionModal","actionName","pop","autoAction","auto","enterBuyPhase","buysLeft","newVictoryPoints","cardBought","cardsLeft","newCard","deckSplit","setSpacer","setTurnState","window","onkeydown","keyCode","onkeyup","cleanup","undefined","LogDisplay","TurnInfo","TrashButton","ButtonDisplay","newPlay","treasureNames","val","self","indexOf","treasureCard","nextAction","newCoin","newSize","supplyMsg","newQueue","CurrentModal","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7b71ec99.chunk.js","sourcesContent":["var map = {\n\t\"./Adventurer.jpg\": 16,\n\t\"./Artisan.jpg\": 17,\n\t\"./Bandit.jpg\": 18,\n\t\"./Bureaucrat.jpg\": 19,\n\t\"./Cellar.jpg\": 20,\n\t\"./Chancellor.jpg\": 21,\n\t\"./Chapel.jpg\": 22,\n\t\"./Copper.jpg\": 23,\n\t\"./Council_Room.jpg\": 24,\n\t\"./Curse.jpg\": 25,\n\t\"./Duchy.jpg\": 26,\n\t\"./Estate.jpg\": 27,\n\t\"./Feast.jpg\": 28,\n\t\"./Festival.jpg\": 29,\n\t\"./Gardens.jpg\": 30,\n\t\"./Gold.jpg\": 31,\n\t\"./Harbinger.jpg\": 32,\n\t\"./Laboratory.jpg\": 33,\n\t\"./Library.jpg\": 34,\n\t\"./Market.jpg\": 35,\n\t\"./Merchant.jpg\": 36,\n\t\"./Militia.jpg\": 37,\n\t\"./Mine.jpg\": 38,\n\t\"./Moat.jpg\": 39,\n\t\"./Moneylender.jpg\": 40,\n\t\"./Poacher.jpg\": 41,\n\t\"./Province.jpg\": 42,\n\t\"./Remodel.jpg\": 43,\n\t\"./Sentry.jpg\": 44,\n\t\"./Silver.jpg\": 45,\n\t\"./Smithy.jpg\": 46,\n\t\"./Spy.jpg\": 47,\n\t\"./Thief.jpg\": 48,\n\t\"./Throne_Room.jpg\": 49,\n\t\"./Vassal.jpg\": 50,\n\t\"./Village.jpg\": 51,\n\t\"./Witch.jpg\": 52,\n\t\"./Woodcutter.jpg\": 53,\n\t\"./Workshop.jpg\": 54\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","module.exports = __webpack_public_path__ + \"static/media/Adventurer.be939008.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Artisan.4379fa98.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bandit.9d98a617.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bureaucrat.c539a1a4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cellar.963cda6a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Chancellor.333df184.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Chapel.747b0f1e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Copper.25a3a87b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Council_Room.ace064e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Curse.b70192b7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Duchy.d2c0c766.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Estate.c9ec060f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Feast.e33241fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Festival.af0c9e52.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gardens.2490700a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gold.df7287e6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Harbinger.f0c114b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Laboratory.96f3a1b2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Library.07857f88.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Market.70f1cd16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Merchant.09ba9d2d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Militia.b0b9a045.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mine.9977d889.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Moat.ab3e6b16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Moneylender.0480f84b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Poacher.0964e482.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Province.6f81772e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Remodel.fd52d3f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Sentry.7be7f767.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Silver.560c4fbe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Smithy.3b2a2499.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Spy.a2aa11e0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Thief.031b2660.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Throne_Room.8502a321.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Vassal.0c040b7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Village.595e2479.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Witch.e45eb845.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Woodcutter.157e926a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Workshop.7873d057.jpg\";","import cardList from './cards.json';\n\nexport const standardGame = [\n  'Village',\n  'Smithy',\n  'Market',\n  'Chapel', // trash\n  'Cellar', // discard\n  'Remodel', // trash\n  'Mine', // trash\n  'Moneylender', // trash\n  // 'Vassal', // discard *modal option\n  // 'Workshop',\n  // 'Harbinger',\n  // 'Merchant',\n  'Festival',\n  'Laboratory'\n];\n\nconst importAll = files => {\n  return files.keys().map(files)\n},\nextract = data => {\n  return file => {\n    file.path = data.filter(name => name.includes(file.name))[0];\n    return file;\n  }\n},\ncardImages = importAll(require.context(`../media`)),\ncardTypes = ['treasure', 'victory'],\nallCards = (set = []) => ({\n  victory: cardList.victory.map(extract(cardImages)),\n  treasure: cardList.treasure.map(extract(cardImages)),\n  action: cardList.action.map(extract(cardImages)).filter(card => ( set.includes(card.name) ))\n});\n\nexport const startingCards = () => {\n  const startingDeck = [];\n  cardTypes.forEach(type => {\n    for (let j = 0; j < (type === 'treasure'? 7 : 3); j++) {\n      startingDeck.push(allCards()[type][0]);\n    };\n  });\n  return startingDeck;\n};\n\nexport const supplies = (set = []) => {\n  const allCardTypes = cardTypes.concat('action'),\n  allSupplies = [],\n  setSupplies = type => {\n    allCards(set)[type].forEach((cardType, i) => {\n      const equation = type === 'treasure'? 20 * (3-i) : type === 'action' || cardType.name === 'Curse'? 10 : 8;\n      for (let j = 0; j < equation; j++) {\n        allSupplies.push(cardType);\n      };\n    });\n  };\n\n  allCardTypes.forEach(setSupplies);\n\n  return allSupplies;\n};\n","export default str => (str.charAt(0).toUpperCase() + str.slice(1));","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport capital from './capital';\n\nexport const spacer = () => ([<div key={`log${uuidv4().slice(0,8)}`} className=\"spacer\"/>]);\n\nconst colors = ['red', 'blue', 'orange', 'green'],\nlogActions = ['actions', 'cards', 'buys', 'treasure'];\n\nexport const generateLog = (gameState, cards, cardAction, num, actionLog) => {\n  const size = num || num === 0? num : cards? cards.length : 1;\n  let action = cards && cards[0].end? cards[0].end : cardAction? cardAction : 'plays';\n\n  return [\n    <div\n      className=\"log\"\n      key={`log${uuidv4().slice(0,8)}`}\n    >\n      <p className={`${cards? '' : 'turn-log'}`}>\n        {cards? actionLog? '•' : '' : <span>Turn {gameState.turn} -&nbsp;</span>}\n        <span className={`${colors[gameState.turnPlayer-1]}`}>P{gameState.player}</span>\n        {cards?\n        <span>\n          &nbsp;{action} {cards && (cards[0].name === 'Action' || cards[0].name === 'Buy' || cards[0].name === 'Coin')? '+' : ''}\n          <span className={cards[0].name === 'Coin'? 'coin' : ''}>{cards && cards[0].end? 'their' : size === 1 && !actionLog? 'a' : size}</span>\n          <span className={`${cards[0].type}-text`}>\n            &nbsp;{cards[0].name === 'Coin'? '' : <span>{cards[0].name}</span>}\n            {size !== 1 && cards[0].type !== 'Treasure' && cards[0].name !== 'Coin'? 's' : ''}\n          </span>\n        </span>\n        :\n        ''}\n      </p>\n    </div>\n  ];\n};\n\nexport default (gameState, cards, cardAction, num) => {\n  let newLogs = [];\n  newLogs = newLogs.concat(generateLog(gameState, cards, cardAction, num));\n  \n  if (cards && cards[0].type === 'Action' && cardAction !== 'buys') {\n    logActions.forEach(action => {\n      const descriptor = action === 'cards'? 'draws' : 'gets',\n      name =  action === 'treasure'? 'Coin': capital(action).slice(0, -1),\n      invalid = action === 'cards' && cards && isNaN(cards[0].cards);\n      if (cards[0][action] && !invalid) newLogs = newLogs.concat(generateLog(gameState, [{...cards[0], name}], descriptor, cards[0][action], true));\n    })\n  };\n  return newLogs;\n};","export default arr => {\n  const newArr = [...arr];\n  let index = newArr.length, temp, random;\n  while (0 !== index) {\n    random = Math.floor(Math.random() * index);\n    index -= 1;\n    temp = newArr[index];\n    newArr[index] = newArr[random];\n    newArr[random] = temp;\n  };\n  return newArr;\n};","export default (hand, value) => {\n  let total = 0;\n  hand.forEach(card => {\n    total = card[value]? total + card[value] : total;\n  });\n  return total;\n};","export default checkHand => (\n  checkHand.map(card => (card.type === 'Action'? true : false)).includes(true)\n);","export default cards => {\n  let treasure = 0;\n    cards.forEach(card => {\n      treasure += card.treasure? card.treasure : 0;\n    });\n  return treasure;\n};\n","import hasAction from './hasAction';\nimport printLog from './printLog';\n\nexport default turnObject => {\n  if (!turnObject.actions || !hasAction(turnObject.hand)) {\n    turnObject = {...turnObject,\n      phase: 'Buy',\n      actions: 0,\n      logs: turnObject.logs.concat(printLog(turnObject.gameState, [{name: 'Buy Phase', end: 'enters'}]))\n    };\n  };\n  return {...turnObject, discardTrashQueue: [], discardTrashState: false};\n};\n","import shuffle from './shuffle';\n\nexport default (size, deck, discard) => {\n  let newDeck = [...deck],\n  newHand = newDeck.splice(0,size),\n  newDiscard = [...discard];\n\n  if (deck.length < size) {\n    newDeck = newDeck.concat(shuffle(newDiscard));\n    newDiscard = [];\n    newHand = newHand.concat(newDeck.splice(0, (size - newHand.length)));\n  };\n  return [newHand, newDeck, newDiscard];\n};\n","export default (card, count, source, dest) => {\n  const newSource = [...source],\n  removal = newSource.findIndex(sourceCard => (sourceCard === card)),\n  movingCards = newSource.splice(removal, count),\n  newDest = [...dest].concat(movingCards);\n  return [newSource, newDest, movingCards];\n};\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport capital from '../utils/capital';\n\nexport default props => {\n  const [showFullCard, setShowFullCard] = useState(false),\n  [altKey, setAltKey] = useState(false),\n  types = ['cards', 'actions', 'buys', 'treasure'],\n  instructionText = () => {\n    let newText = props.card.instructions? props.card.instructions : '';\n    if (newText.includes('coin-')) {\n      newText = newText.split(\"coin-\");\n\n      let remainder = newText[1].length > 1? newText[1].split(' ') : [newText[1]];\n      const beginning = newText[0],\n      coinValue = remainder.shift();\n\n      remainder = remainder.length > 0? remainder.join(' ') : '';\n      newText = <div>{beginning}<span className='coin'>{coinValue}</span> {remainder}</div>\n    };\n    return newText;\n  };\n\n  useEffect(() => {\n    setAltKey(props.altKey)\n  }, [props.altKey]);\n\n  return <div className={`card-info ${props.card.empty || props.queued.includes(props.card)? 'transparent' : ''}`}>\n    {props.count > 1 || props.supply || props.queued.includes(props.card)? <p\n      onClick={e => {\n        if (props.live && !props.card.empty) {\n          const trueLimit = props.limit - props.queued.length,\n          count = trueLimit > props.count? props.count : trueLimit;\n          props.onClick(props.card, count);\n          e.stopPropagation();\n        }\n      }}\n      className={`card-stack${props.live && props.card.type !== 'Action' && props.stacked? '-live' : ''}`}\n    >\n      {props.card.empty? 0 : props.count}\n    </p> : ''}\n    <div\n      className={`card ${props.card.type} ${props.card.name === 'Curse'? 'curse' : ''} ${props.live && !props.card.empty? 'live' : ''}`}\n      onClick={() => { if (props.live && !props.card.empty) props.onClick(props.card, 1, props.supply? true : false) }}\n      onMouseOver={() => {\n        setShowFullCard(true);\n      }}\n      onMouseOut={() => {\n        setShowFullCard(false);\n      }}\n    >\n      <p className=\"card-top\">{props.card.name}</p>\n      <div className=\"card-btm\">\n        <p className=\"card-side\">{props.card.cost}</p>\n        <p>{props.card.type}</p>\n        <p className=\"card-side\">&nbsp;</p>\n      </div>\n      <div className={`full-card-wrapper ${props.stacked? 'lower-card' : ''}`}>\n        <div className={`full-card ${props.card.type} ${showFullCard && altKey? '' : 'hidden'} ${props.live? 'full-card-live' : ''} ${props.card.name === 'Curse'? 'curse' : ''}`}>\n          <div className=\"card-top\">\n            <p>{props.card.name}</p>\n            <div\n              className={`${props.card.type === 'Action'? 'action' : 'card'}-image`}\n              style={{\n                backgroundImage: `url(${props.card.path})`\n              }}\n            />\n            {props.card.type === 'Action'? <div className=\"card-instructions\">\n              <div className=\"perks\">\n                {types.map(type => {\n                  const name = type === 'treasure'? <span className='coin'>{props.card[type]}</span> : props.card[type] > 1? capital(type) : capital(type).slice(0, -1);\n                  return props.card[type] && !isNaN(props.card[type]) && props.card.hidden !== type? <p key={type}>+<span>{type !== 'treasure'? props.card[type] : ''} {name}</span></p> : ''\n                })}\n              </div>\n              <div className=\"instructions\">\n                {instructionText()}\n              </div>\n            </div> : ''}\n          </div>\n          <div className=\"card-btm\">\n            <p className=\"card-side\">{props.card.cost}</p>\n            <p>{props.card.type}</p>\n            <p className=\"card-side\">&nbsp;</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n};\n","export default type => {\n  return (a, b) => {\n    let compare = 0;\n    if (a[type] > b[type]) {\n      compare = 1;\n    } else if (a[type] < b[type]) {\n      compare = -1;\n    };\n    return compare;\n  };\n};\n","import React from 'react';\nimport Card from './Card';\nimport sorting from '../utils/sorting';\n\nexport default props => {\n  let stacks = [props.cards],\n  count = 1;\n  const cardElements = [[], [], []];\n  if (props.sort) {\n    stacks[0].sort(sorting('name'));\n    stacks[0].sort(sorting('type'));\n    \n    const actions = stacks[0].filter(card => (card.type === 'Action')).sort(sorting('cost')),\n    treasures = stacks[0].filter(card => (card.type === 'Treasure')).sort(sorting('cost')),\n    victory = stacks[0].filter(card => (card.type === 'Victory')).sort(sorting('cost'));\n\n    stacks = props.supply? [treasures, victory, actions] : [actions, treasures, victory];\n  };\n\n  stacks.forEach((cards, i) => {\n    cards.forEach((card, j) => {\n      let correctAction = (\n        (props.phase === card.type && !props.supply) ||\n        (props.phase === 'Buy' && card.type === 'Treasure' && !props.supply) ||\n        ((props.phase === 'Buy' || props.phase === 'supply') && props.coin >= card.cost && props.supply) ||\n        props.discardTrashState\n      );\n      \n      if (cards[j+1] && cards[j+1].name === card.name) {\n        count++;\n      } else {\n        const cardQueue = props.cardQueue? props.cardQueue : [];\n\n        let limit = Number.MAX_SAFE_INTEGER;\n\n        if (props.discardTrashState && !isNaN(props.discardTrashState.amount)) limit = parseInt(props.discardTrashState.amount);\n\n        if (cardQueue.length > 0) {\n          let reduce = 0;\n          cardQueue.forEach(spentCard => {\n            if (spentCard.name === card.name) reduce += 1;\n          });\n          count = count - reduce;\n          correctAction = count > 0 && cardQueue.length < limit;\n        };\n        if (props.restriction) {\n          correctAction = correctAction && (props.restriction === card.type || props.restriction === card.subType);\n        };\n        \n        if (props.actionSupply) {\n          correctAction = correctAction && props.supply;\n        };\n\n        cardElements[i].push(\n          <div key={`card${i}${j}`} className=\"inline\">\n            <Card\n              altKey={props.altKey}\n              card={card}\n              live={props.live? true : correctAction}\n              count={count}\n              stacked={props.stacked}\n              onClick={props.onClick}\n              supply={props.supply}\n              queued={cardQueue}\n              limit={limit}\n            />\n          </div>\n        );\n        count = 1;\n      };\n    });\n  });\n\n  const allCards = cardElements[0].concat(cardElements[1]).concat(cardElements[2]),\n  title = props.title? <p className=\"red top-spaced\">{props.title} ({props.cards.length})</p> : '';\n\n  return props.stacked?\n  cardElements.map((stack, i) => {\n    return <div key={`stack${i}`} className=\"stack\">{stack}</div>\n  })\n  : props.supply? \n    cardElements.map((stack, i) => {\n      return <div key={`supply${i}`} className=\"supply\">{stack}</div>\n    })\n  :\n  <div>\n    {title}\n    {allCards}\n  </div>\n};\n","import React from 'react';\nimport capital from '../utils/capital';\nimport CardDisplay from './CardDisplay';\n\nexport default props => {\n  return <div>\n    <CardDisplay\n      altKey={props.altKey}\n      onClick={props.accept}\n      cards={props.cards}\n      live={props.live}\n      title={props.live? 'You may play' : `To ${props.buttonText}`}\n    />\n    <div\n      className=\"game-button start-button live\"\n      onClick={props.decline}\n    >\n      {capital(props.buttonText)}\n    </div>\n  </div>\n};\n","import printLog from './printLog';\n\nexport default (gameState, log) => {\n  return [log.concat(printLog(gameState, [{name: 'Buy Phase', end: 'enters'}])), 'Buy', 0];\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\nexport default props => {\n  const logSticker = document.getElementById('log-sticker');\n\n  useEffect(() => {\n    if (logSticker) logSticker.scrollIntoView();\n  }, [props.logs, logSticker]);\n\n  return (\n    <div className=\"logs\">\n      <p className=\"log-title\">Log</p>\n      <div className=\"breakline\"/>\n      <div className=\"log-readout\">\n        {props.logs.length > 1? props.logs : <div className=\"spacer\"/>}\n        <div id=\"log-sticker\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport default props => (  \n  <div className=\"info\">\n    <span className=\"hidden\">VP <span className='red'>{props.victoryPoints}</span> |&nbsp;</span>\n    <span>Action <span className='red'>{props.actions}</span> |&nbsp;</span>\n    <span>Buys <span className='red'>{props.buys}</span> |&nbsp;</span>\n    <span>Coin <span className='coin'>{props.treasure - props.bought}</span> </span>\n  </div>\n);\n","import React from 'react';\n\nexport default props => (\n  <div\n    className={`trash game-button${props.trash.length > 0? ' active' : ''}`}\n    onClick={() => {\n      if (props.trash.length > 0) {\n      props.setModalContent([props.trash, 'Trash']);\n        props.setShowModal(true);\n      };\n    }}\n  >\n    Trash ({props.trash.length})\n  </div>\n);\n","export default hand => {\n  const handTreasures = hand.filter(card => (card.type === 'Treasure'));\n  return handTreasures.length;\n};\n","import React from 'react';\nimport instructions from '../utils/instructions';\nimport treasureInHand from '../utils/treasureInHand';\n\nexport default props => {\n  const noLimit = props.discardTrashState && (props.discardTrashState.modifier === 'up-to' || props.discardTrashState.amount === 'any'),\n  rightAmount = props.discardTrashState && props.discardTrashState.amount === props.discardTrashQueue.length;\n\n  return (\n    <div className=\"button-display\">\n      <div>\n        <div className=\"game-button red\">{props.phase? `Your Turn - ${props.phase} Phase` : `P2's Turn`}</div>\n        <p className=\"instructions red\">{instructions(props.phase, props.buys, props.discardTrashState, props.actionSupply)}&nbsp;</p>\n  \n        {props.actionSupply? '' : <div>\n          <div\n            className={props.discardTrashState || !props.phase? 'hidden' : treasureInHand(props.hand) > 0 && props.phase === 'Buy'? `game-button live` : 'button-space'}\n            onClick={props.playAllTreasure}\n          >\n            {treasureInHand(props.hand) > 0 && props.phase === 'Buy'? `Play All Treasure (${treasureInHand(props.hand)})` : ' '}\n          </div>\n          <div\n            className={`game-button ${props.discardTrashState? noLimit || rightAmount? '' : 'not-' : ''}live${props.discardTrashState || !props.phase? '' : ' top-spaced'}`}\n            onClick={props.discardTrashState? noLimit || rightAmount? props.discardTrashCards : () => {} : props.nextPhase}\n          >\n            {props.discardTrashState? `Confirm Card${isNaN(props.discardTrashState.amount) || props.discardTrashState.amount > 1? 's' : ''} to ${props.discardTrashState.type} (${props.discardTrashQueue.length})` : props.phase? `End ${props.phase} Phase` : 'Start Turn'}\n          </div>\n          <div\n            className={`game-button live top-spaced ${(props.discardTrashState && props.discardTrashQueue.length > 0)? '' : ' hidden'}`}\n            onClick={() => {props.setDiscardTrashQueue([])}}\n          >\n            {`Choose different cards`}\n          </div>\n        </div>}\n      </div>\n      <div>\n        <div className=\"breakline\"/>\n        <div className=\"deck\">\n          <p>Deck ({props.deck.length})</p>\n        </div>\n        <div\n          className={`deck ${props.discard.length > 0? 'active' : ''}`}\n          onClick={() => {\n            if (props.discard.length > 0) {\n              props.setModalContent([props.discard, 'Discard']);\n              props.setShowModal(true);\n            };\n          }}\n        >\n          <p>Discard ({props.discard.length})</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default (phase, buys, action, alt) => {\n  let message = '';\n  if (action) {\n    const modifier = action.modifier? `${action.modifier.split('-').join(' ')} ` : '',\n    plural = action.amount && isNaN(action.amount)? '(s)' : action.amount > 1? 's' : '';\n    message = `Select ${modifier}${action.amount} card${plural}${alt? '' : ` to ${action.type}`}`;\n  } else if (alt) {\n    message = `Choose a Card`;\n  } else if (phase === 'Buy') {\n    message = `Choose Cards to Buy (${buys})`;\n  } else {\n    message = 'Choose Actions to play';\n  };\n  return message;\n};\n","import React from 'react';\n\nexport default props => {\n  return <div\n    style={{display: props.show? 'flex' : 'none' }}\n    className=\"modal-bg\"\n    onClick={() => props.setShow(false)}\n  >\n    <div className=\"modal-box\" onClick={event => event.stopPropagation()}>\n      <div className=\"modal-top-row\">\n        {props.close? <div className=\"x-close-button\" onClick={() => props.setShow(false)}>x</div> : ''}\n      </div>\n      <div className=\"modal-content\">{props.children}</div>\n    </div>\n  </div>\n};\n","import React from 'react';\nimport CardDisplay from './CardDisplay';\nimport Modal from './Modal';\n\nexport default props => {\n  return <Modal\n    close={true}\n    show={props.showModal}\n    setShow={props.setShowModal}\n    children={<CardDisplay altKey={props.altKey} cards={props.modalContent[0]} title={props.modalContent[1]} />}\n  />\n};\n","import React from 'react';\n\nexport default props => (\n  <div>\n    <h2 className=\"title\">{props.phaseTitle}</h2>\n    {props.start? <h1>Dominion</h1> : <p>{props.victory} Victory Points!</p>}\n    <div\n      className=\"game-button start-button live\"\n      onClick={props.onClick}\n    >\n      {props.button}\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { useState } from 'react';\nimport { startingCards, supplies, standardGame } from './data/cardSets';\nimport { generateLog, spacer } from './utils/printLog';\nimport printLog from './utils/printLog';\nimport shuffle from './utils/shuffle';\nimport countValue from './utils/countValue';\nimport hasAction from './utils/hasAction';\nimport countTreasure from './utils/countTreasure';\nimport cleanup from './utils/cleanup';\nimport rollover from './utils/rollover';\nimport moveCard from './utils/moveCard';\nimport next from './utils/next';\nimport parseActionObject from './utils/parseActionObject';\nimport autoAction from './utils/autoAction';\nimport enterBuyPhase from './utils/enterBuyPhase';\nimport CardDisplay from './components/CardDisplay';\nimport LogDisplay from './components/LogDisplay';\nimport TurnInfo from './components/TurnInfo';\nimport TrashButton from './components/TrashButton';\nimport ButtonDisplay from './components/ButtonDisplay';\nimport Modal from './components/Modal';\nimport CurrentModal from './components/CurrentModal';\nimport StartScreen from './components/StartScreen';\nimport './styles/App.css';\n\nfunction App() {\n  const player = 1,\n  [phase, setPhase] = useState(),\n  [showModal, setShowModal] = useState(false),\n  [discardTrashState, setDiscardTrashState] = useState(false),\n  [discardTrashQueue, setDiscardTrashQueue] = useState([]),\n  [modalContent, setModalContent] = useState([[]]),\n  [altKey, setAltKey] = useState(false),\n  [actionSupply, setActionSupply] = useState(false),\n  [logs, setLogs] = useState([]),\n  [gameState, setGameState] = useState({turn: 1, player, turnPlayer: 1}),\n  [deck, setDeck] = useState([]),\n  [hand, setHand] = useState([]),\n  [inPlay, setInPlay] = useState([]),\n  [discard, setDiscard] = useState([]),\n  [trash, setTrash] = useState([]),\n  [supply, setSupply] = useState([]),\n  [bought, setBought] = useState(0),\n  [treasure, setTreasure] = useState(0),\n  [actions, setActions] = useState(0),\n  [buys, setBuys] = useState(0),\n  [emptySupply, setEmptySupply] = useState(),\n  [victoryPoints, setVictoryPoints] = useState(),\n  startGame = () => {\n    const startingDeck = shuffle(startingCards());\n    setVictoryPoints(countValue(startingDeck, 'victory'));\n    setHand(startingDeck.splice(0, 5));\n    setDeck(startingDeck);\n    setSupply(supplies(standardGame));\n    setDiscard([]);\n    setInPlay([]);\n    setLogs([]);\n    setTrash([]);\n    setMenuScreen(null);\n    setPhase(null);\n    setEmptySupply(0);\n    setTreasure(0);\n    setBuys(0);\n  },\n  [menuScreen, setMenuScreen] = useState(\n    <StartScreen\n      onClick={startGame}\n      phaseTitle={\"Let's Play\"}\n      start={true}\n      button={'Start Game'}\n    />\n  );\n  let turnObject = {\n    gameState,\n    hand: [...hand],\n    deck: [...deck],\n    discard: [...discard],\n    trash: [...trash],\n    inPlay: [...inPlay],\n    logs: [...logs],\n    supply: [...supply],\n    discardTrashQueue: [...discardTrashQueue],\n    discardTrashState: {...discardTrashState},\n    actions,\n    buys,\n    treasure,\n    phase\n  };\n  const playAllTreasure = () => {\n    const treasures = hand.filter(card => (card.type === 'Treasure')),\n    newPlay = [...inPlay].concat(treasures),\n    unique = (val, i, self) => ( self.indexOf(val) === i );\n\n    let newLogs = [...logs],\n    treasureNames = treasures.filter(unique),\n    newHand = hand.filter(card => (card.type !== 'Treasure'));\n\n    treasureNames.forEach(treasureCard => {\n      newLogs = newLogs.concat(printLog(gameState, treasures.filter(\n        card => (treasureCard.name === card.name)\n      )));\n    });\n    setTreasure(countTreasure(newPlay));\n    setInPlay(newPlay);\n    setHand(newHand);\n    setLogs(newLogs);\n  },\n  gainCard = card => {\n    turnObject.logs = turnObject.logs.concat(generateLog(gameState, [card], 'gains', 1, true));\n    [turnObject.supply, turnObject.discard] = moveCard(card, 1, supply, discard);\n    turnObject.treasure = actionSupply.treasure;\n    turnObject = cleanup(turnObject);\n    \n    setTurnState(turnObject);\n    setDiscardTrashQueue(turnObject.discardTrashQueue);\n    setDiscardTrashState(turnObject.discardTrashState);\n    setActionSupply(false);\n  },\n  discardTrashCard = (card, size = 1) => {\n    let newQueue = moveCard(card, size, hand, discardTrashQueue);\n    setDiscardTrashQueue(newQueue[1]);\n  },\n  discardTrashCards = () => {\n    let actionName = 'discards';\n    discardTrashQueue.forEach(card => {\n      turnObject.hand.splice(turnObject.hand.findIndex(i => (i === card)), 1);\n    });\n    if (turnObject.discardTrashState.type === 'discard') {\n      turnObject.discard = turnObject.discard.concat(discardTrashQueue);\n      setDiscard(turnObject.discard);\n    } else {\n      actionName = 'trashes';\n      turnObject.trash = turnObject.trash.concat(discardTrashQueue);\n      setTrash(turnObject.trash);\n    };\n    turnObject.logs = turnObject.logs.concat(generateLog(\n      gameState,\n      [{name: 'Card'}],\n      actionName,\n      discardTrashQueue.length,\n      true\n    ));\n    if (turnObject.discardTrashState.next.length > 0) {\n      turnObject = next(turnObject, setActionSupply);\n    } else {\n      turnObject = cleanup(turnObject);\n    };\n\n    setTurnState(turnObject);\n    setDiscardTrashQueue(turnObject.discardTrashQueue);\n    setDiscardTrashState(turnObject.discardTrashState);\n  },\n  nextPhase = (card, count, supplyOn) => {\n    turnObject.treasure = countValue(inPlay, 'treasure');\n    const size = phase === card.type? 1 : count;\n\n    switch (phase) {\n      case 'Action':\n        if (card.type === phase) {\n          let rolloverCards = [],\n          newCards;\n\n          turnObject.logs = turnObject.logs.concat(printLog(gameState, [card]));\n          turnObject.actions = turnObject.actions - 1;\n          [turnObject.hand, turnObject.inPlay, newCards] = moveCard(card, size, hand, inPlay);\n          turnObject.treasure += countTreasure(newCards);\n\n          if (card.actions) turnObject.actions += card.actions;\n          if (card.buys) turnObject.buys += card.buys;\n          if (card.cards) {\n            [rolloverCards, turnObject.deck, turnObject.discard] = rollover(card.cards, turnObject.deck, turnObject.discard);\n            turnObject.hand = turnObject.hand.concat(rolloverCards);\n          };\n          \n          const actionObject = card.discardTrash? parseActionObject(card) : false;\n          let checkHandForActions = !hasAction(turnObject.hand);\n          if (actionObject) {\n            if (actionObject.next && actionObject.next[0] === 'auto') {\n              [turnObject, checkHandForActions] = autoAction(card, turnObject, actionObject, setMenuScreen, setDiscardTrashState);\n            } else {\n              checkHandForActions = false;\n              setDiscardTrashState(actionObject);\n            };\n          };\n          const auto = actionObject? actionObject.next && actionObject.next[0] === 'auto'? true : false : true;\n\n          if ((!turnObject.actions || checkHandForActions) && auto) {\n            [turnObject.logs, turnObject.phase, turnObject.actions] = enterBuyPhase(gameState, turnObject.logs);\n          };\n        } else {\n          [turnObject.logs, turnObject.phase, turnObject.actions] = enterBuyPhase(gameState, turnObject.logs);\n        };\n        break;\n      case 'Buy':\n        let buysLeft = buys,\n        newVictoryPoints = victoryPoints;\n\n        if (supplyOn) {\n          let cardBought;\n          [turnObject.supply, turnObject.discard, cardBought] = moveCard(card, 1, supply, turnObject.discard)\n\n          const cardsLeft = turnObject.supply.filter(newCard => newCard.name === card.name).length;\n          newVictoryPoints = card.victory? newVictoryPoints + card.victory : newVictoryPoints;\n\n          if (!cardsLeft) {\n            setEmptySupply(emptySupply + 1);\n            cardBought = {...cardBought[0], empty: true};\n            turnObject.supply = turnObject.supply.concat(cardBought);\n\n            if (card.name === 'Province' || emptySupply === 2) {\n              setSupply(turnObject.supply);\n              setMenuScreen(\n                <StartScreen\n                  onClick={startGame}\n                  phaseTitle={\"Game Over\"}\n                  victory={newVictoryPoints}\n                  button={'Play Again'}\n                />\n              );\n              break;\n            };\n          };\n          setSupply(turnObject.supply);\n          setBought(bought + card.cost);\n          buysLeft = buysLeft - 1;\n          turnObject.logs = turnObject.logs.concat(printLog(gameState, cardBought, 'buys'));\n        } else if (card.type === 'Treasure') {\n          let newCards;\n          [turnObject.hand, turnObject.inPlay, newCards] = moveCard(card, size, hand, inPlay);\n          turnObject.treasure += countTreasure(newCards)\n          turnObject.logs = turnObject.logs.concat(printLog(gameState, [card], null, count));\n        } else {\n          buysLeft = 0;\n        };\n        \n        if (buysLeft < 1 || ((treasure - bought - card.cost) < 1 && supplyOn)) {\n          const deckSplit = [...deck];\n          turnObject = {...turnObject,\n            inPlay: [],\n            discard: turnObject.discard.concat(inPlay).concat(hand),\n            hand: deckSplit.splice(0,5)\n          };\n          buysLeft = 0;\n          [turnObject.hand, turnObject.deck, turnObject.discard] = rollover(5, turnObject.deck, turnObject.discard);\n          turnObject = {...turnObject, \n            actions: 0,\n            treasure: 0,\n            phase: null,\n            logs: turnObject.logs.concat(printLog(gameState, [{name: 'turn', end: 'ends'}]))\n          };\n          setBought(0);\n          setGameState({...gameState, turn: gameState.turn + 1});\n        };\n        turnObject.buys = buysLeft;\n        setVictoryPoints(newVictoryPoints);\n        break;\n\n      default:\n        const setSpacer = gameState.turn === 1 && gameState.turnPlayer === 1? [] : spacer();\n        turnObject.logs = turnObject.logs.concat(setSpacer.concat(printLog(gameState)));\n        turnObject.buys =  1;\n        if (hasAction(hand)) {\n          turnObject.actions = 1;\n          turnObject.phase = 'Action';\n        } else {\n          [turnObject.logs, turnObject.phase] = enterBuyPhase(gameState, turnObject.logs);\n        }\n        break;\n    };\n    setTurnState(turnObject);\n  },\n  setTurnState = turnObject => {\n    setHand(turnObject.hand);\n    setDeck(turnObject.deck);\n    setDiscard(turnObject.discard);\n    setTrash(turnObject.trash);\n    setInPlay(turnObject.inPlay);\n    setLogs(turnObject.logs);\n    setSupply(turnObject.supply);\n    setActions(turnObject.actions);\n    setBuys(turnObject.buys);\n    setTreasure(turnObject.treasure);\n    setPhase(turnObject.phase);\n  };\n\n  window.onkeydown = e => {\n    if (e.keyCode === 18) {\n      setAltKey(true);\n    } else if (e.keyCode === 27) {\n      setShowModal(false);\n    } else if (e.keyCode === 13) {\n      if (menuScreen) startGame();\n    };\n  };\n  window.onkeyup = e => {\n    if (e.keyCode === 18) setAltKey(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"supply-market\">\n        <CardDisplay\n          coin={treasure - bought}\n          phase={actionSupply? 'supply' : phase}\n          onClick={actionSupply? gainCard : nextPhase}\n          actionSupply={actionSupply}\n          sort={true}\n          supply={true}\n          altKey={altKey}\n          cards={supply}\n          restriction={discardTrashState? discardTrashState.restriction : undefined}\n        />\n      </div>\n      <LogDisplay logs={logs} />\n      <TurnInfo\n        victoryPoints={victoryPoints}\n        actions={actions}\n        buys={buys}\n        treasure={treasure}\n        bought={bought}\n      />\n      <TrashButton\n        trash={trash}\n        setModalContent={setModalContent}\n        setShowModal={setShowModal}\n      />\n      <div className=\"in-play\">\n        <CardDisplay sort={true} altKey={altKey} cards={inPlay}/>\n      </div>\n      <div className=\"combo-mat\"></div>\n      <ButtonDisplay\n        buys={buys}\n        actionSupply={actionSupply}\n        hand={hand}\n        phase={phase}\n        discardTrashState={discardTrashState}\n        discardTrashQueue={discardTrashQueue}\n        setDiscardTrashQueue={setDiscardTrashQueue}\n        deck={deck}\n        setModalContent={setModalContent}\n        setShowModal={setShowModal}\n        discard={discard}\n        playAllTreasure={playAllTreasure}\n        discardTrashCards={discardTrashCards}\n        startGame={startGame}\n        nextPhase={nextPhase}\n      />\n      <div className=\"hand\">\n        <CardDisplay\n          altKey={altKey}\n          stacked={true}\n          sort={true}\n          cards={hand}\n          phase={phase}\n          onClick={discardTrashState? discardTrashCard : nextPhase}\n          discardTrashState={discardTrashState}\n          actionSupply={actionSupply}\n          restriction={discardTrashState? discardTrashState.restriction : undefined}\n          cardQueue={discardTrashQueue}\n        />\n      </div>\n      <Modal\n        show={menuScreen? true : false}\n        setShow={() => {}}\n        children={menuScreen}\n      />\n      <CurrentModal\n        showModal={showModal}\n        setShowModal={setShowModal}\n        altKey={altKey}\n        modalContent={modalContent}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export default card => {\n  let actionInfo = card.discardTrash.split(' '),\n  amount = actionInfo[1],\n  modifier = '';\n  if (amount.includes('|')){\n    amount = amount.split('|');\n    modifier = amount[1];\n    amount = amount[0];\n  };\n  amount = isNaN(amount)? amount : parseInt(amount);\n  return {\n    card,\n    type: actionInfo[0],\n    amount,\n    modifier,\n    next: actionInfo[2]? [actionInfo[2], card[actionInfo[2]]] : [],\n    restriction: actionInfo[3]\n  };\n};\n","import React from 'react';\nimport ActionModal from '../components/ActionModal';\nimport { generateLog } from './printLog';\nimport hasAction from './hasAction';\n\nexport default (card, turnObject, actionObject, setMenuScreen, setDiscardTrashState) => {\n  if (actionObject.modifier && actionObject.modifier !== 'up-to') {\n    switch (actionObject.modifier) {\n      case 'deck':\n        let discardTrash = card.deck.split(' ');\n        discardTrash = {\n          index: discardTrash[0],\n          next: discardTrash[1],\n          type: discardTrash[2]\n        };\n        let removal = turnObject.deck.splice(discardTrash.index, actionObject.amount);\n        const decline = () => {\n          setMenuScreen(null);\n          turnObject.discard = turnObject.discard.concat(removal);\n        };\n        if (discardTrash.next === 'modal') {\n          const cardLive = discardTrash.type === removal[0].type,\n          accept = () => {\n            setMenuScreen(null);\n            setDiscardTrashState(false);\n          };\n          setMenuScreen(\n            <ActionModal\n              cards={removal}\n              accept={accept}\n              decline={decline}\n              buttonText={actionObject.type}\n              live={cardLive}\n            />\n          );\n        } else {\n          decline();\n        }\n        break;\n      default: break;\n    };\n  } else {\n    let actionName = 'discards';\n    let removal = turnObject.hand.findIndex(i => (i.name === actionObject.restriction));\n    if (actionObject.type === 'discard') {\n      turnObject.discard = turnObject.discard.concat(turnObject.hand.splice(removal, actionObject.amount));\n    } else {\n      turnObject.trash = (turnObject.trash.concat(turnObject.hand.splice(removal, actionObject.amount)));\n      actionName = 'trashes'\n    };\n    if (removal === -1) {\n      turnObject.treasure = 0;\n      turnObject.logs.pop();\n    } else {\n      turnObject.logs = turnObject.logs.concat(generateLog(turnObject.gameState, [{name: 'Card'}], actionName, actionObject.amount, true))\n    }\n  };\n  \n  const checkHand = !hasAction(turnObject.hand);\n\n  return [turnObject, checkHand]\n};\n","import { generateLog } from './printLog';\nimport rollover from './rollover';\nimport cleanup from './cleanup';\n\nexport default (turnObject, setActionSupply) => {\n  const nextAction = turnObject.discardTrashState.next[0];\n  let newCoin = turnObject.treasure;\n  switch (nextAction) {\n    case 'draw':\n      let rolloverCards;\n      const newSize = !isNaN(turnObject.discardTrashState.next[1])? turnObject.discardTrashState.next[1] : turnObject.discardTrashQueue.length;\n      [rolloverCards, turnObject.deck, turnObject.discard] = rollover(newSize, turnObject.deck, turnObject.discard);\n      turnObject = {...turnObject,\n        hand: turnObject.hand.concat(rolloverCards),\n        logs: turnObject.logs.concat(generateLog(turnObject.gameState, [{name: 'Card'}], 'draws', turnObject.discardTrashQueue.length, true))\n      };\n      turnObject = cleanup(turnObject);\n      break;\n    case 'supply':\n      const supplyMsg = turnObject.discardTrashState.card.supply.split(' ');\n      newCoin = supplyMsg[0] === 'discardTrash'? turnObject.discardTrashQueue[0].cost + parseInt(supplyMsg[1]): supplyMsg[0];\n      setActionSupply({treasure: turnObject.treasure, count: turnObject.discardTrashState.amount, restriction: supplyMsg[2]});\n      turnObject.discardTrashQueue = [];\n      break;\n    default:\n  };\n  return {...turnObject, treasure: newCoin};\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}