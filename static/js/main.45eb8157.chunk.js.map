{"version":3,"sources":["media sync /^/.//.*$","media/Adventurer.jpg","media/Artisan.jpg","media/Bandit.jpg","media/Bureaucrat.jpg","media/Cellar.jpg","media/Chancellor.jpg","media/Chapel.jpg","media/Copper.jpg","media/Council_Room.jpg","media/Curse.jpg","media/Duchy.jpg","media/Estate.jpg","media/Feast.jpg","media/Festival.jpg","media/Gardens.jpg","media/Gold.jpg","media/Harbinger.jpg","media/Laboratory.jpg","media/Library.jpg","media/Market.jpg","media/Merchant.jpg","media/Militia.jpg","media/Mine.jpg","media/Moat.jpg","media/Moneylender.jpg","media/Poacher.jpg","media/Province.jpg","media/Remodel.jpg","media/Sentry.jpg","media/Silver.jpg","media/Smithy.jpg","media/Spy.jpg","media/Thief.jpg","media/Throne_Room.jpg","media/Vassal.jpg","media/Village.jpg","media/Witch.jpg","media/Woodcutter.jpg","media/Workshop.jpg","data/cardSets.js","utils/capital.js","utils/printLog.js","utils/shuffle.js","utils/countValue.js","utils/hasType.js","utils/enterBuyPhase.js","utils/cleanup.js","utils/rollover.js","utils/moveCard.js","components/Card.js","utils/sorting.js","components/CardDisplay.js","components/ActionModal.js","utils/playAction.js","utils/parseActionObject.js","utils/autoAction.js","components/LogDisplay.js","components/TurnInfo.js","components/TrashButton.js","utils/countCards.js","components/ButtonDisplay.js","utils/instructions.js","components/Modal.js","components/CurrentModal.js","components/StartScreen.js","App.js","utils/next.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","files","standardGame","extract","data","file","path","filter","name","includes","cardImages","require","cardTypes","allCards","set","victory","cardList","treasure","action","card","str","charAt","toUpperCase","slice","colors","logActions","generateLog","gameState","cards","cardAction","num","actionLog","size","length","end","className","key","uuidv4","turn","turnPlayer","player","type","newLogs","concat","forEach","descriptor","capital","invalid","isNaN","arr","temp","random","newArr","index","Math","floor","hand","value","total","log","printLog","turnObject","actions","hasType","enterBuyPhase","logs","phase","discardTrashQueue","discardTrashState","deck","discard","newDeck","newHand","splice","newDiscard","shuffle","count","source","dest","newSource","removal","findIndex","sourceCard","movingCards","props","useState","showFullCard","setShowFullCard","altKey","setAltKey","useEffect","empty","queued","supply","onClick","live","trueLimit","limit","stopPropagation","stacked","destination","onMouseOver","onMouseOut","cost","style","backgroundImage","hidden","newText","instructions","remainder","split","beginning","coinValue","shift","join","instructionText","a","b","compare","stacks","cardElements","sort","sorting","treasures","i","j","correctAction","coin","coinMod","cardQueue","Number","MAX_SAFE_INTEGER","amount","parseInt","reduce","spentCard","restriction","subType","actionSupply","push","Card","title","stack","CardDisplay","accept","buttonText","decline","setters","newCards","rolloverCards","moveCard","inPlay","countValue","buys","rollover","actionObject","discardTrash","actionInfo","modifier","next","parseActionObject","checkHandForActions","actionLogName","cardLive","menuScreen","ActionModal","playAction","setTurnState","cleanup","setPhase","endLog","pop","setDiscardTrashState","actionName","trash","checkHand","autoAction","auto","logSticker","document","getElementById","scrollIntoView","victoryPoints","bought","setModalContent","setShowModal","attribute","alt","message","plural","countCards","playAllTreasure","discardTrashCards","nextPhase","setDiscardTrashQueue","display","show","setShow","event","close","children","Modal","showModal","modalContent","phaseTitle","start","button","App","setActionSupply","setLogs","setGameState","setDeck","setHand","setInPlay","setDiscard","setCoinMod","setTrash","setSupply","setBought","setTreasure","setActions","setBuys","emptySupply","setEmptySupply","setVictoryPoints","startGame","startingDeck","startingCards","allCardTypes","allSupplies","setSupplies","cardType","equation","supplies","setMenuScreen","StartScreen","supplyOn","buysLeft","newVictoryPoints","cardBought","cardsLeft","newCard","deckSplit","setSpacer","window","onkeydown","keyCode","onkeyup","undefined","LogDisplay","TurnInfo","TrashButton","ButtonDisplay","newPlay","treasureNames","val","self","indexOf","treasureCard","nextAction","newCoin","newSize","supplyMsg","newQueue","CurrentModal","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.45eb8157.chunk.js","sourcesContent":["var map = {\n\t\"./Adventurer.jpg\": 16,\n\t\"./Artisan.jpg\": 17,\n\t\"./Bandit.jpg\": 18,\n\t\"./Bureaucrat.jpg\": 19,\n\t\"./Cellar.jpg\": 20,\n\t\"./Chancellor.jpg\": 21,\n\t\"./Chapel.jpg\": 22,\n\t\"./Copper.jpg\": 23,\n\t\"./Council_Room.jpg\": 24,\n\t\"./Curse.jpg\": 25,\n\t\"./Duchy.jpg\": 26,\n\t\"./Estate.jpg\": 27,\n\t\"./Feast.jpg\": 28,\n\t\"./Festival.jpg\": 29,\n\t\"./Gardens.jpg\": 30,\n\t\"./Gold.jpg\": 31,\n\t\"./Harbinger.jpg\": 32,\n\t\"./Laboratory.jpg\": 33,\n\t\"./Library.jpg\": 34,\n\t\"./Market.jpg\": 35,\n\t\"./Merchant.jpg\": 36,\n\t\"./Militia.jpg\": 37,\n\t\"./Mine.jpg\": 38,\n\t\"./Moat.jpg\": 39,\n\t\"./Moneylender.jpg\": 40,\n\t\"./Poacher.jpg\": 41,\n\t\"./Province.jpg\": 42,\n\t\"./Remodel.jpg\": 43,\n\t\"./Sentry.jpg\": 44,\n\t\"./Silver.jpg\": 45,\n\t\"./Smithy.jpg\": 46,\n\t\"./Spy.jpg\": 47,\n\t\"./Thief.jpg\": 48,\n\t\"./Throne_Room.jpg\": 49,\n\t\"./Vassal.jpg\": 50,\n\t\"./Village.jpg\": 51,\n\t\"./Witch.jpg\": 52,\n\t\"./Woodcutter.jpg\": 53,\n\t\"./Workshop.jpg\": 54\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","module.exports = __webpack_public_path__ + \"static/media/Adventurer.be939008.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Artisan.4379fa98.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bandit.9d98a617.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bureaucrat.c539a1a4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cellar.963cda6a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Chancellor.333df184.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Chapel.747b0f1e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Copper.25a3a87b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Council_Room.ace064e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Curse.b70192b7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Duchy.d2c0c766.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Estate.c9ec060f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Feast.e33241fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Festival.af0c9e52.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gardens.2490700a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gold.df7287e6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Harbinger.f0c114b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Laboratory.96f3a1b2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Library.07857f88.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Market.70f1cd16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Merchant.09ba9d2d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Militia.b0b9a045.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mine.9977d889.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Moat.ab3e6b16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Moneylender.0480f84b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Poacher.0964e482.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Province.6f81772e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Remodel.fd52d3f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Sentry.7be7f767.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Silver.560c4fbe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Smithy.3b2a2499.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Spy.a2aa11e0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Thief.031b2660.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Throne_Room.8502a321.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Vassal.0c040b7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Village.595e2479.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Witch.e45eb845.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Woodcutter.157e926a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Workshop.7873d057.jpg\";","import cardList from './cards.json';\n\nexport const standardGame = [\n  'Village',\n  'Smithy',\n  'Market',\n  'Chapel', // trash\n  'Cellar', // discard\n  'Remodel', // trash\n  'Mine', // trash\n  'Moneylender', // trash\n  'Vassal', // discard *modal option\n  // 'Workshop',\n  // 'Harbinger',\n  // 'Merchant',\n  // 'Festival',\n  'Laboratory'\n];\n\nconst importAll = files => {\n  return files.keys().map(files)\n},\nextract = data => {\n  return file => {\n    file.path = data.filter(name => name.includes(file.name))[0];\n    return file;\n  }\n},\ncardImages = importAll(require.context(`../media`)),\ncardTypes = ['treasure', 'victory'],\nallCards = (set = []) => ({\n  victory: cardList.victory.map(extract(cardImages)),\n  treasure: cardList.treasure.map(extract(cardImages)),\n  action: cardList.action.map(extract(cardImages)).filter(card => ( set.includes(card.name) ))\n});\n\nexport const startingCards = () => {\n  const startingDeck = [];\n  cardTypes.forEach(type => {\n    for (let j = 0; j < (type === 'treasure'? 7 : 3); j++) {\n      startingDeck.push(allCards()[type][0]);\n    };\n  });\n  return startingDeck;\n};\n\nexport const supplies = (set = []) => {\n  const allCardTypes = cardTypes.concat('action'),\n  allSupplies = [],\n  setSupplies = type => {\n    allCards(set)[type].forEach((cardType, i) => {\n      const equation = type === 'treasure'? 20 * (3-i) : type === 'action' || cardType.name === 'Curse'? 10 : 8;\n      for (let j = 0; j < equation; j++) {\n        allSupplies.push(cardType);\n      };\n    });\n  };\n\n  allCardTypes.forEach(setSupplies);\n\n  return allSupplies;\n};\n","export default str => (str.charAt(0).toUpperCase() + str.slice(1));","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport capital from './capital';\n\nexport const spacer = () => ([<div key={`log${uuidv4().slice(0,8)}`} className=\"spacer\"/>]);\n\nconst colors = ['red', 'blue', 'orange', 'green'],\nlogActions = ['actions', 'cards', 'buys', 'treasure'];\n\nexport const generateLog = (gameState, cards, cardAction, num, actionLog) => {\n  const size = num || num === 0? num : cards? cards.length : 1;\n  let action = cards && cards[0].end? cards[0].end : cardAction? cardAction : 'plays';\n\n  return [\n    <div\n      className=\"log\"\n      key={`log${uuidv4().slice(0,8)}`}\n    >\n      <p className={`${cards? '' : 'turn-log'}`}>\n        {cards? actionLog? '•' : '' : <span>Turn {gameState.turn} -&nbsp;</span>}\n        <span className={`${colors[gameState.turnPlayer-1]}`}>P{gameState.player}</span>\n        {cards?\n        <span>\n          &nbsp;{action} {cards && (cards[0].name === 'Action' || cards[0].name === 'Buy' || cards[0].name === 'Coin')? '+' : ''}\n          <span className={cards[0].name === 'Coin'? 'coin' : ''}>{cards && cards[0].end? 'their' : size === 1 && !actionLog? 'a' : size}</span>\n          <span className={`${cards[0].type}-text`}>\n            &nbsp;{cards[0].name === 'Coin'? '' : <span>{cards[0].name}</span>}\n            {size !== 1 && cards[0].type !== 'Treasure' && cards[0].name !== 'Coin'? 's' : ''}\n          </span>\n        </span>\n        :\n        ''}\n      </p>\n    </div>\n  ];\n};\n\nexport default (gameState, cards, cardAction, num) => {\n  let newLogs = [];\n  newLogs = newLogs.concat(generateLog(gameState, cards, cardAction, num));\n  \n  if (cards && cards[0].type === 'Action' && cardAction !== 'buys') {\n    logActions.forEach(action => {\n      const descriptor = action === 'cards'? 'draws' : 'gets',\n      name =  action === 'treasure'? 'Coin': capital(action).slice(0, -1),\n      invalid = action === 'cards' && cards && isNaN(cards[0].cards);\n      if (cards[0][action] && !invalid) newLogs = newLogs.concat(generateLog(gameState, [{...cards[0], name}], descriptor, cards[0][action], true));\n    })\n  };\n  return newLogs;\n};","export default arr => {\n  const newArr = [...arr];\n  let index = newArr.length, temp, random;\n  while (0 !== index) {\n    random = Math.floor(Math.random() * index);\n    index -= 1;\n    temp = newArr[index];\n    newArr[index] = newArr[random];\n    newArr[random] = temp;\n  };\n  return newArr;\n};","export default (hand, value) => {\n  let total = 0;\n  hand.forEach(card => {\n    total = card[value]? total + card[value] : total;\n  });\n  return total;\n};","export default (hand, type) => (\n  hand.map(card => (card.type === type? true : false)).includes(true)\n);","import printLog from './printLog';\n\nexport default (gameState, log) => {\n  return [log.concat(printLog(gameState, [{name: 'Buy Phase', end: 'enters'}])), 'Buy', 0];\n};\n","import hasType from './hasType';\nimport enterBuyPhase from './enterBuyPhase';\n\nexport default turnObject => {\n  if (!turnObject.actions || !hasType(turnObject.hand, 'Action')) {\n    [turnObject.logs, turnObject.phase, turnObject.actions] = enterBuyPhase(turnObject.gameState, turnObject.logs);\n  };\n  return {...turnObject, discardTrashQueue: [], discardTrashState: false};\n};\n","import shuffle from './shuffle';\n\nexport default (size, deck, discard) => {\n  let newDeck = [...deck],\n  newHand = newDeck.splice(0,size),\n  newDiscard = [...discard];\n\n  if (deck.length < size) {\n    newDeck = newDeck.concat(shuffle(newDiscard));\n    newDiscard = [];\n    newHand = newHand.concat(newDeck.splice(0, (size - newHand.length)));\n  };\n  return [newHand, newDeck, newDiscard];\n};\n","export default (card, count, source, dest) => {\n  const newSource = [...source],\n  removal = newSource.findIndex(sourceCard => (sourceCard === card)),\n  movingCards = newSource.splice(removal, count),\n  newDest = [...dest].concat(movingCards);\n  return [newSource, newDest, movingCards];\n};\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport capital from '../utils/capital';\n\nexport default props => {\n  const [showFullCard, setShowFullCard] = useState(false),\n  [altKey, setAltKey] = useState(false),\n  types = ['cards', 'actions', 'buys', 'treasure'],\n  instructionText = () => {\n    let newText = props.card.instructions? props.card.instructions : '';\n    if (newText.includes('coin-')) {\n      newText = newText.split(\"coin-\");\n\n      let remainder = newText[1].length > 1? newText[1].split(' ') : [newText[1]];\n      const beginning = newText[0],\n      coinValue = remainder.shift();\n\n      remainder = remainder.length > 0? remainder.join(' ') : '';\n      newText = <div>{beginning}<span className='coin'>{coinValue}</span> {remainder}</div>\n    };\n    return newText;\n  };\n\n  useEffect(() => {\n    setAltKey(props.altKey)\n  }, [props.altKey]);\n\n  return <div className={`card-info ${props.card.empty || props.queued.includes(props.card)? 'transparent' : ''}`}>\n    {props.count > 1 || props.supply || props.queued.includes(props.card)? <p\n      onClick={e => {\n        if (props.live && !props.card.empty && !props.supply && props.card.type === 'Treasure') {\n          const trueLimit = props.limit - props.queued.length,\n          count = trueLimit > props.count? props.count : trueLimit;\n          props.onClick(props.card, count);\n          e.stopPropagation();\n        }\n      }}\n      className={`card-stack${props.live && props.card.type === 'Treasure' && props.stacked? '-live' : ''}`}\n    >\n      {props.card.empty? 0 : props.count}\n    </p> : ''}\n    <div\n      className={`card ${props.card.type} ${props.card.name === 'Curse'? 'curse' : ''} ${props.live && !props.card.empty? 'live' : ''}`}\n      onClick={() => { if (props.live && !props.card.empty) props.onClick(props.card, 1, props.destination? props.destination : props.supply? true : false) }}\n      onMouseOver={() => {\n        setShowFullCard(true);\n      }}\n      onMouseOut={() => {\n        setShowFullCard(false);\n      }}\n    >\n      <p className=\"card-top\">{props.card.name}</p>\n      <div className=\"card-btm\">\n        <p className=\"card-side\">{props.card.cost}</p>\n        <p>{props.card.type}</p>\n        <p className=\"card-side\">&nbsp;</p>\n      </div>\n      <div className={`full-card-wrapper ${props.stacked? 'lower-card' : ''}`}>\n        <div className={`full-card ${props.card.type} ${showFullCard && altKey? '' : 'hidden'} ${props.live? 'full-card-live' : ''} ${props.card.name === 'Curse'? 'curse' : ''}`}>\n          <div className=\"card-top\">\n            <p>{props.card.name}</p>\n            <div\n              className={`${props.card.type === 'Action'? 'action' : 'card'}-image`}\n              style={{\n                backgroundImage: `url(${props.card.path})`\n              }}\n            />\n            {props.card.type === 'Action'? <div className=\"card-instructions\">\n              <div className=\"perks\">\n                {types.map(type => {\n                  const name = type === 'treasure'? <span className='coin'>{props.card[type]}</span> : props.card[type] > 1? capital(type) : capital(type).slice(0, -1);\n                  return props.card[type] && !isNaN(props.card[type]) && props.card.hidden !== type? <p key={type}>+<span>{type !== 'treasure'? props.card[type] : ''} {name}</span></p> : ''\n                })}\n              </div>\n              <div className=\"instructions\">\n                {instructionText()}\n              </div>\n            </div> : ''}\n          </div>\n          <div className=\"card-btm\">\n            <p className=\"card-side\">{props.card.cost}</p>\n            <p>{props.card.type}</p>\n            <p className=\"card-side\">&nbsp;</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n};\n","export default type => {\n  return (a, b) => {\n    let compare = 0;\n    if (a[type] > b[type]) {\n      compare = 1;\n    } else if (a[type] < b[type]) {\n      compare = -1;\n    };\n    return compare;\n  };\n};\n","import React from 'react';\nimport Card from './Card';\nimport sorting from '../utils/sorting';\n\nexport default props => {\n  let stacks = [props.cards],\n  count = 1;\n  const cardElements = [[], [], []];\n  if (props.sort) {\n    stacks[0].sort(sorting('name'));\n    stacks[0].sort(sorting('type'));\n    \n    const actions = stacks[0].filter(card => (card.type === 'Action')).sort(sorting('cost')),\n    treasures = stacks[0].filter(card => (card.type === 'Treasure')).sort(sorting('cost')),\n    victory = stacks[0].filter(card => (card.type === 'Victory')).sort(sorting('cost'));\n\n    stacks = props.supply? [treasures, victory, actions] : [actions, treasures, victory];\n  };\n\n  stacks.forEach((cards, i) => {\n    cards.forEach((card, j) => {\n      let correctAction = (\n        (props.phase === card.type && !props.supply) ||\n        (props.phase === 'Buy' && card.type === 'Treasure' && !props.supply) ||\n        ((props.phase === 'Buy' || props.phase === 'supply') && props.coin - props.coinMod >= card.cost && props.supply) ||\n        props.discardTrashState\n      );\n      \n      if (cards[j+1] && cards[j+1].name === card.name) {\n        count++;\n      } else {\n        const cardQueue = props.cardQueue? props.cardQueue : [];\n\n        let limit = Number.MAX_SAFE_INTEGER;\n\n        if (props.discardTrashState && !isNaN(props.discardTrashState.amount)) limit = parseInt(props.discardTrashState.amount);\n\n        if (cardQueue.length > 0) {\n          let reduce = 0;\n          cardQueue.forEach(spentCard => {\n            if (spentCard.name === card.name) reduce += 1;\n          });\n          count = count - reduce;\n          correctAction = count > 0 && cardQueue.length < limit;\n        };\n        if (props.restriction) {\n          correctAction = correctAction && (props.restriction === card.type || props.restriction === card.subType);\n        };\n        \n        if (props.actionSupply) {\n          correctAction = correctAction && props.supply;\n        };\n\n        cardElements[i].push(\n          <div key={`card${i}${j}`} className=\"inline\">\n            <Card\n              altKey={props.altKey}\n              card={card}\n              live={props.live? true : correctAction}\n              count={count}\n              stacked={props.stacked}\n              onClick={props.onClick}\n              supply={props.supply}\n              queued={cardQueue}\n              limit={limit}\n              destination={props.actionSupply? props.actionSupply.destination : false}\n            />\n          </div>\n        );\n        count = 1;\n      };\n    });\n  });\n\n  const allCards = cardElements[0].concat(cardElements[1]).concat(cardElements[2]),\n  title = props.title? <p className=\"red top-spaced\">{props.title} ({props.cards.length})</p> : '';\n\n  return props.stacked?\n  cardElements.map((stack, i) => {\n    return <div key={`stack${i}`} className=\"stack\">{stack}</div>\n  })\n  : props.supply? \n    cardElements.map((stack, i) => {\n      return <div key={`supply${i}`} className=\"supply\">{stack}</div>\n    })\n  :\n  <div>\n    {title}\n    {allCards}\n  </div>\n};\n","import React from 'react';\nimport capital from '../utils/capital';\nimport CardDisplay from './CardDisplay';\n\nexport default props => {\n  return <div>\n    <CardDisplay\n      altKey={props.altKey}\n      onClick={props.accept}\n      cards={props.cards}\n      live={props.live}\n      title={props.live? 'You may play' : `To ${props.buttonText}`}\n    />\n    <div\n      className=\"game-button start-button live\"\n      onClick={props.decline}\n    >\n      {capital(props.buttonText)}\n    </div>\n  </div>\n};\n","import parseActionObject from './parseActionObject';\nimport autoAction from './autoAction';\nimport printLog from './printLog';\nimport moveCard from './moveCard';\nimport countValue from './countValue';\nimport rollover from './rollover';\nimport hasType from './hasType';\nimport enterBuyPhase from './enterBuyPhase';\n\nexport default (card, size, turnObject, setters) => {\n  let rolloverCards = [],\n  newCards;\n  turnObject.logs = turnObject.logs.concat(printLog(turnObject.gameState, [card]));\n  turnObject.actions--;\n  [turnObject.hand, turnObject.inPlay, newCards] = moveCard(card, size, turnObject.hand, turnObject.inPlay);\n  turnObject.treasure += countValue(newCards, 'treasure');\n  if (card.actions) turnObject.actions += card.actions;\n  if (card.buys) turnObject.buys += card.buys;\n  if (card.cards) {\n    [rolloverCards, turnObject.deck, turnObject.discard] = rollover(card.cards, turnObject.deck, turnObject.discard);\n    turnObject.hand = turnObject.hand.concat(rolloverCards);\n  };\n  const actionObject = card.discardTrash? parseActionObject(card) : false;\n  let checkHandForActions = !hasType(turnObject.hand, 'Action');\n  if (actionObject) {\n    if (actionObject.next && actionObject.next[0] === 'auto') {\n      [turnObject, checkHandForActions] = autoAction(card, turnObject, actionObject, setters);\n    } else {\n      checkHandForActions = false;\n      setters.setDiscardTrashState(actionObject);\n    };\n  };\n  let auto = actionObject? actionObject.next && actionObject.next[0] === 'auto'? true : false : true;\n  auto = turnObject.menuScreen? false : auto;\n  if ((!turnObject.actions || checkHandForActions) && auto) {\n    [turnObject.logs, turnObject.phase, turnObject.actions] = enterBuyPhase(turnObject.gameState, turnObject.logs);\n  };\n\n  return turnObject;\n};\n","export default card => {\n  let actionInfo = card.discardTrash.split(' '),\n  amount = actionInfo[1],\n  modifier = '';\n  if (amount.includes('|')){\n    amount = amount.split('|');\n    modifier = amount[1];\n    amount = amount[0];\n  };\n  amount = isNaN(amount)? amount : parseInt(amount);\n  return {\n    card,\n    type: actionInfo[0],\n    amount,\n    modifier,\n    next: actionInfo[2]? [actionInfo[2], card[actionInfo[2]]] : [],\n    restriction: actionInfo[3]\n  };\n};\n","import React from 'react';\nimport ActionModal from '../components/ActionModal';\nimport { generateLog } from './printLog';\nimport hasType from './hasType';\nimport cleanup from './cleanup';\nimport playAction from './playAction';\n\nexport default (card, turnObject, actionObject, setters) => {\n  const actionLogName = [{name: `Card${actionObject.modifier? ` from ${actionObject.modifier}` : ''}`}]\n  if (actionObject.modifier && actionObject.modifier !== 'up-to') {\n    let discardTrash = card[actionObject.modifier].split(' ');\n    discardTrash = {\n      index: discardTrash[0],\n      next: discardTrash[1],\n      type: discardTrash[2]\n    };\n    switch (actionObject.modifier) {\n      case 'deck':\n        if (turnObject.deck.length < 1) turnObject = {...turnObject, deck: turnObject.discard, discard: []};\n        let removal = turnObject.deck.splice(discardTrash.index, actionObject.amount);\n        const discard = () => {\n          turnObject.discard = turnObject.discard.concat(removal);\n          turnObject.logs = turnObject.logs.concat(generateLog(turnObject.gameState, actionLogName, 'discards', 1, true));\n        };\n        if (discardTrash.next === 'modal') {\n          const cardLive = discardTrash.type === removal[0].type,\n          decline = () => {\n            turnObject.actions--;\n            turnObject = cleanup(turnObject);\n            if (turnObject.actions === 0) setters.setPhase('Buy');\n            turnObject.hand.splice(turnObject.hand.findIndex(card => (card === removal[0])), 1);\n            const endLog = turnObject.logs.pop();\n            turnObject = {...turnObject,\n              discard: turnObject.discard.concat(removal),\n              logs: turnObject.logs.concat(generateLog(turnObject.gameState, actionLogName, 'discards', 1, true)).concat(endLog),\n              menuScreen: null\n            };\n            setters.setTurnState(turnObject);\n            setters.setDiscardTrashState(false);\n          },\n          accept = () => {\n            turnObject.menuScreen = null;\n            turnObject.hand = turnObject.hand.concat(removal[0]);\n            turnObject = playAction(removal[0], 1, turnObject, setters);\n            setters.setTurnState(turnObject);\n          };\n          if (cardLive) {\n            turnObject.actions++;\n            turnObject.menuScreen = (\n              <ActionModal\n                cards={removal}\n                accept={accept}\n                decline={decline}\n                buttonText={actionObject.type}\n                live={cardLive}\n              />\n            );\n          } else {\n            discard();\n          };\n        } else {\n          discard();\n        }\n        break;\n      default: break;\n    };\n  } else {\n    let actionName = 'discards';\n    let removal = turnObject.hand.findIndex(i => (i.name === actionObject.restriction));\n    if (removal === -1) {\n      turnObject.coinMod += 3;\n      turnObject.logs.pop();\n    } else {\n      if (actionObject.type === 'discard') {\n        turnObject.discard = turnObject.discard.concat(turnObject.hand.splice(removal, actionObject.amount));\n      } else {\n        turnObject.trash = (turnObject.trash.concat(turnObject.hand.splice(removal, actionObject.amount)));\n        actionName = 'trashes'\n      };\n      turnObject.logs = turnObject.logs.concat(generateLog(turnObject.gameState, actionLogName, actionName, actionObject.amount, true))\n    };\n  };\n  const checkHand = !hasType(turnObject.hand, 'Action');\n  return [turnObject, checkHand]\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\nexport default props => {\n  const logSticker = document.getElementById('log-sticker');\n\n  useEffect(() => {\n    if (logSticker) logSticker.scrollIntoView();\n  }, [props.logs, logSticker]);\n\n  return (\n    <div className=\"logs\">\n      <p className=\"log-title\">Log</p>\n      <div className=\"breakline\"/>\n      <div className=\"log-readout\">\n        {props.logs.length > 1? props.logs : <div className=\"spacer\"/>}\n        <div id=\"log-sticker\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport default props => (  \n  <div className=\"info\">\n    <span className=\"hidden\">VP <span className='red'>{props.victoryPoints}</span> |&nbsp;</span>\n    <span>Action <span className='red'>{props.actions}</span> |&nbsp;</span>\n    <span>Buys <span className='red'>{props.buys}</span> |&nbsp;</span>\n    <span>Coin <span className='coin'>{props.treasure - props.bought - props.coinMod}</span> </span>\n  </div>\n);\n","import React from 'react';\n\nexport default props => (\n  <div\n    className={`trash game-button${props.trash.length > 0? ' active' : ''}`}\n    onClick={() => {\n      if (props.trash.length > 0) {\n      props.setModalContent([props.trash, 'Trash']);\n        props.setShowModal(true);\n      };\n    }}\n  >\n    Trash ({props.trash.length})\n  </div>\n);\n","export default (hand, attribute, value) => {\n  const handTreasures = hand.filter(card => (card[attribute] === value));\n  return handTreasures.length;\n};\n","import React from 'react';\nimport instructions from '../utils/instructions';\nimport countCards from '../utils/countCards';\n\nexport default props => (\n  <div className=\"button-display\">\n    <div>\n      <div className=\"game-button red\">{props.phase? `Your Turn - ${props.phase} Phase` : `P2's Turn`}</div>\n      <p className=\"instructions red\">{instructions(props.phase, props.buys, props.discardTrashState, props.actionSupply)}&nbsp;</p>\n\n      {props.actionSupply? '' : <div>\n        <div\n          className={props.discardTrashState || !props.phase? 'hidden' : countCards(props.hand, 'type', 'Treasure') > 0 && props.phase === 'Buy'? `game-button live` : 'button-space'}\n          onClick={props.playAllTreasure}\n        >\n          {countCards(props.hand, 'type', 'Treasure') > 0 && props.phase === 'Buy'? `Play All Treasure (${countCards(props.hand, 'type', 'Treasure')})` : ' '}\n        </div>\n\n        <div\n          className={`game-button live${props.discardTrashState || !props.phase? '' : ' top-spaced'}`}\n          onClick={props.discardTrashState? props.discardTrashCards : props.nextPhase}\n        >\n          {props.discardTrashState? `Confirm Card${isNaN(props.discardTrashState.amount) || props.discardTrashState.amount > 1? 's' : ''} to ${props.discardTrashState.type} (${props.discardTrashQueue.length})` : props.phase? `End ${props.phase} Phase` : 'Start Turn'}\n        </div>\n\n        <div\n          className={`game-button live top-spaced ${(props.discardTrashState && props.discardTrashQueue.length > 0)? '' : ' hidden'}`}\n          onClick={() => {props.setDiscardTrashQueue([])}}\n        >\n          {`Choose different cards`}\n        </div>\n      </div>}\n    </div>\n    <div>\n      <div className=\"breakline\"/>\n      <div className=\"deck\">\n        <p>Deck ({props.deck.length})</p>\n      </div>\n      <div\n        className={`deck ${props.discard.length > 0? 'active' : ''}`}\n        onClick={() => {\n          if (props.discard.length > 0) {\n            props.setModalContent([props.discard, 'Discard']);\n            props.setShowModal(true);\n          };\n        }}\n      >\n        <p>Discard ({props.discard.length})</p>\n      </div>\n    </div>\n  </div>\n);\n","export default (phase, buys, action, alt) => {\n  let message = '';\n  if (action) {\n    const modifier = action.modifier? `${action.modifier.split('-').join(' ')} ` : '',\n    plural = action.amount && isNaN(action.amount)? '(s)' : action.amount > 1? 's' : '';\n    message = `Select ${modifier}${action.amount} card${plural}${alt? '' : ` to ${action.type}`}`;\n  } else if (alt) {\n    message = `Choose a Card`;\n  } else if (phase === 'Buy') {\n    message = `Choose Cards to Buy (${buys})`;\n  } else {\n    message = 'Choose Actions to play';\n  };\n  return message;\n};\n","import React from 'react';\n\nexport default props => {\n  return <div\n    style={{display: props.show? 'flex' : 'none' }}\n    className=\"modal-bg\"\n    onClick={() => props.setShow(false)}\n  >\n    <div className=\"modal-box\" onClick={event => event.stopPropagation()}>\n      <div className=\"modal-top-row\">\n        {props.close? <div className=\"x-close-button\" onClick={() => props.setShow(false)}>x</div> : ''}\n      </div>\n      <div className=\"modal-content\">{props.children}</div>\n    </div>\n  </div>\n};\n","import React from 'react';\nimport CardDisplay from './CardDisplay';\nimport Modal from './Modal';\n\nexport default props => {\n  return <Modal\n    close={true}\n    show={props.showModal}\n    setShow={props.setShowModal}\n    children={<CardDisplay altKey={props.altKey} cards={props.modalContent[0]} title={props.modalContent[1]} />}\n  />\n};\n","import React from 'react';\n\nexport default props => (\n  <div>\n    <h2 className=\"title\">{props.phaseTitle}</h2>\n    {props.start? <h1>Dominion</h1> : <p>{props.victory} Victory Points!</p>}\n    <div\n      className=\"game-button start-button live\"\n      onClick={props.onClick}\n    >\n      {props.button}\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { useState } from 'react';\nimport { startingCards, supplies, standardGame } from './data/cardSets';\nimport { generateLog, spacer } from './utils/printLog';\nimport printLog from './utils/printLog';\nimport shuffle from './utils/shuffle';\nimport countValue from './utils/countValue';\nimport hasType from './utils/hasType';\nimport cleanup from './utils/cleanup';\nimport rollover from './utils/rollover';\nimport moveCard from './utils/moveCard';\nimport next from './utils/next';\nimport enterBuyPhase from './utils/enterBuyPhase';\nimport playAction from './utils/playAction';\nimport CardDisplay from './components/CardDisplay';\nimport LogDisplay from './components/LogDisplay';\nimport TurnInfo from './components/TurnInfo';\nimport TrashButton from './components/TrashButton';\nimport ButtonDisplay from './components/ButtonDisplay';\nimport Modal from './components/Modal';\nimport CurrentModal from './components/CurrentModal';\nimport StartScreen from './components/StartScreen';\nimport './styles/App.css';\n\nfunction App() {\n  const player = 1,\n  [phase, setPhase] = useState(),\n  [showModal, setShowModal] = useState(false),\n  [discardTrashState, setDiscardTrashState] = useState(false),\n  [discardTrashQueue, setDiscardTrashQueue] = useState([]),\n  [modalContent, setModalContent] = useState([[]]),\n  [altKey, setAltKey] = useState(false),\n  [actionSupply, setActionSupply] = useState(false),\n  [logs, setLogs] = useState([]),\n  [gameState, setGameState] = useState({turn: 0, player, turnPlayer: 1}),\n  [deck, setDeck] = useState([]),\n  [hand, setHand] = useState([]),\n  [inPlay, setInPlay] = useState([]),\n  [discard, setDiscard] = useState([]),\n  [coinMod, setCoinMod] = useState(0),\n  [trash, setTrash] = useState([]),\n  [supply, setSupply] = useState([]),\n  [bought, setBought] = useState(0),\n  [treasure, setTreasure] = useState(0),\n  [actions, setActions] = useState(0),\n  [buys, setBuys] = useState(0),\n  [emptySupply, setEmptySupply] = useState(),\n  [victoryPoints, setVictoryPoints] = useState(),\n  startGame = () => {\n    const startingDeck = shuffle(startingCards());\n    setVictoryPoints(countValue(startingDeck, 'victory'));\n    setHand(startingDeck.splice(0, 5));\n    setDeck(startingDeck);\n    setSupply(supplies(standardGame));\n    setDiscard([]);\n    setInPlay([]);\n    setLogs([]);\n    setTrash([]);\n    setMenuScreen(null);\n    setPhase(null);\n    setEmptySupply(0);\n    setTreasure(0);\n    setBuys(0);\n    setGameState({...gameState, turn: 1})\n  },\n  [menuScreen, setMenuScreen] = useState(\n    <StartScreen\n      onClick={startGame}\n      phaseTitle={\"Let's Play\"}\n      start={true}\n      button={'Start Game'}\n    />\n  );\n  let turnObject = {\n    gameState,\n    hand: [...hand],\n    deck: [...deck],\n    discard: [...discard],\n    trash: [...trash],\n    inPlay: [...inPlay],\n    logs: [...logs],\n    supply: [...supply],\n    discardTrashQueue: [...discardTrashQueue],\n    discardTrashState: discardTrashState? {...discardTrashState} : false,\n    actions,\n    buys,\n    treasure,\n    phase,\n    menuScreen,\n    coinMod\n  };\n  const playAllTreasure = () => {\n    const treasures = hand.filter(card => (card.type === 'Treasure')),\n    newPlay = [...inPlay].concat(treasures),\n    unique = (val, i, self) => (self.indexOf(val) === i),\n    treasureNames = treasures.filter(unique),\n    newHand = hand.filter(card => (card.type !== 'Treasure'));\n\n    let newLogs = [...logs];\n\n    treasureNames.forEach(treasureCard => {\n      newLogs = newLogs.concat(printLog(gameState, treasures.filter(\n        card => (treasureCard.name === card.name)\n      )));\n    });\n    setTreasure(countValue(newPlay, 'treasure'));\n    setInPlay(newPlay);\n    setHand(newHand);\n    setLogs(newLogs);\n  },\n  gainCard = (card, count, destination) => {\n    turnObject.logs = turnObject.logs.concat(generateLog(\n      gameState,\n      [{...card,\n        name: destination === 'discard'? card.name : <span>{card.name}<span className=\"default-text\"> to their {destination}</span></span>\n      }],\n      'gains',\n      1,\n      true\n    ));\n    [turnObject.supply, turnObject[destination]] = moveCard(card, count, supply, turnObject[destination]);\n    turnObject.treasure = actionSupply.treasure;\n    turnObject = cleanup(turnObject);\n    \n    setTurnState(turnObject);\n    setDiscardTrashQueue(turnObject.discardTrashQueue);\n    setDiscardTrashState(turnObject.discardTrashState);\n    setActionSupply(false);\n  },\n  discardTrashCard = (card, size = 1) => {\n    let newQueue = moveCard(card, size, hand, discardTrashQueue);\n    setDiscardTrashQueue(newQueue[1]);\n  },\n  discardTrashCards = () => {\n    if (discardTrashQueue.length > 0) {\n      let actionName = 'discards';\n      discardTrashQueue.forEach(card => {\n        turnObject.hand.splice(turnObject.hand.findIndex(i => (i === card)), 1);\n      });\n      if (turnObject.discardTrashState.type === 'discard') {\n        turnObject.discard = turnObject.discard.concat(discardTrashQueue);\n        setDiscard(turnObject.discard);\n      } else {\n        actionName = 'trashes';\n        turnObject.trash = turnObject.trash.concat(discardTrashQueue);\n        setTrash(turnObject.trash);\n      };\n      turnObject.logs = turnObject.logs.concat(generateLog(\n        gameState,\n        [{name: 'Card'}],\n        actionName,\n        discardTrashQueue.length,\n        true\n        ));\n        if (turnObject.discardTrashState.next.length > 0) {\n          turnObject = next(turnObject, setActionSupply);\n        } else {\n          turnObject = cleanup(turnObject);\n        };\n      } else {\n        turnObject = cleanup(turnObject);\n      };\n      setDiscardTrashState(turnObject.discardTrashState);\n      setDiscardTrashQueue(turnObject.discardTrashQueue);\n      setTurnState(turnObject);\n    },\n    nextPhase = (card, count, supplyOn) => {\n      turnObject.treasure = countValue(inPlay, 'treasure');\n    const size = phase === card.type? 1 : count;\n\n    switch (phase) {\n      case 'Action':\n        const setters = {\n          setDiscardTrashState,\n          setPhase,\n          setTurnState\n        };\n        if (card.type === phase) {\n          turnObject = playAction(card, size, turnObject, setters);\n        } else {\n          [turnObject.logs, turnObject.phase, turnObject.actions] = enterBuyPhase(gameState, turnObject.logs);\n        };\n        break;\n      case 'Buy':\n        let buysLeft = buys,\n        newVictoryPoints = victoryPoints;\n\n        if (supplyOn) {\n          let cardBought;\n          [turnObject.supply, turnObject.discard, cardBought] = moveCard(card, 1, supply, turnObject.discard)\n\n          const cardsLeft = turnObject.supply.filter(newCard => newCard.name === card.name).length;\n          newVictoryPoints = card.victory? newVictoryPoints + card.victory : newVictoryPoints;\n\n          if (!cardsLeft) {\n            setEmptySupply(emptySupply + 1);\n            cardBought = [{...cardBought[0], empty: true}];\n            turnObject.supply = turnObject.supply.concat(cardBought);\n            if (card.name === 'Province' || emptySupply === 2) {\n              setSupply(turnObject.supply);\n              setGameState({...gameState, turn: 0})\n              turnObject.menuScreen = (\n                <StartScreen\n                  onClick={startGame}\n                  phaseTitle={\"Game Over\"}\n                  victory={newVictoryPoints}\n                  button={'Play Again'}\n                />\n              );\n              break;\n            };\n          };\n          setSupply(turnObject.supply);\n          setBought(bought + card.cost);\n          buysLeft = buysLeft - 1;\n          turnObject.logs = turnObject.logs.concat(printLog(gameState, cardBought, 'buys'));\n        } else if (card.type === 'Treasure') {\n          let newCards;\n          [turnObject.hand, turnObject.inPlay, newCards] = moveCard(card, size, hand, inPlay);\n          turnObject.treasure += countValue(newCards, 'treasure')\n          turnObject.logs = turnObject.logs.concat(printLog(gameState, [card], null, count));\n        } else {\n          buysLeft = 0;\n        };\n        \n        if (buysLeft < 1 || ((treasure - bought - card.cost) < 1 && supplyOn)) {\n          const deckSplit = [...deck];\n          turnObject = {...turnObject,\n            inPlay: [],\n            discard: turnObject.discard.concat(inPlay).concat(hand),\n            hand: deckSplit.splice(0,5)\n          };\n          buysLeft = 0;\n          [turnObject.hand, turnObject.deck, turnObject.discard] = rollover(5, turnObject.deck, turnObject.discard);\n          turnObject = {...turnObject, \n            actions: 0,\n            treasure: 0,\n            coinMod: 0,\n            phase: null,\n            logs: turnObject.logs.concat(printLog(gameState, [{name: 'turn', end: 'ends'}]))\n          };\n          setBought(0);\n          setGameState({...gameState, turn: gameState.turn + 1});\n        };\n        turnObject.buys = buysLeft;\n        setVictoryPoints(newVictoryPoints);\n        break;\n\n      default:\n        const setSpacer = gameState.turn === 1 && gameState.turnPlayer === 1? [] : spacer();\n        turnObject.logs = turnObject.logs.concat(setSpacer.concat(printLog(gameState)));\n        turnObject.buys =  1;\n        if (hasType(hand, 'Action')) {\n          turnObject.actions = 1;\n          turnObject.phase = 'Action';\n        } else {\n          [turnObject.logs, turnObject.phase] = enterBuyPhase(gameState, turnObject.logs);\n        }\n        break;\n    };\n    setTurnState(turnObject);\n  },\n  setTurnState = turnObject => {\n    setHand(turnObject.hand);\n    setDeck(turnObject.deck);\n    setDiscard(turnObject.discard);\n    setTrash(turnObject.trash);\n    setInPlay(turnObject.inPlay);\n    setLogs(turnObject.logs);\n    setSupply(turnObject.supply);\n    setActions(turnObject.actions);\n    setBuys(turnObject.buys);\n    setTreasure(turnObject.treasure);\n    setPhase(turnObject.phase);\n    setMenuScreen(turnObject.menuScreen);\n    setCoinMod(turnObject.coinMod);\n  };\n\n  window.onkeydown = e => {\n    if (e.keyCode === 18) {\n      setAltKey(true);\n    } else if (e.keyCode === 27) {\n      setShowModal(false);\n    } else if (e.keyCode === 13) {\n      if (menuScreen && gameState.turn === 0) startGame();\n    };\n  };\n  window.onkeyup = e => {\n    if (e.keyCode === 18) setAltKey(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"supply-market\">\n        <CardDisplay\n          coin={treasure - bought}\n          phase={actionSupply? 'supply' : phase}\n          onClick={actionSupply? gainCard : nextPhase}\n          actionSupply={actionSupply}\n          sort={true}\n          supply={true}\n          altKey={altKey}\n          cards={supply}\n          coinMod={coinMod}\n          restriction={discardTrashState? discardTrashState.restriction : undefined}\n        />\n      </div>\n      <LogDisplay logs={logs} />\n      <TurnInfo\n        victoryPoints={victoryPoints}\n        actions={actions}\n        buys={buys}\n        treasure={treasure}\n        coinMod={coinMod}\n        bought={bought}\n      />\n      <TrashButton\n        trash={trash}\n        setModalContent={setModalContent}\n        setShowModal={setShowModal}\n      />\n      <div className=\"in-play\">\n        <CardDisplay sort={true} altKey={altKey} cards={inPlay}/>\n      </div>\n      <div className=\"combo-mat\"></div>\n      <ButtonDisplay\n        buys={buys}\n        actionSupply={actionSupply}\n        hand={hand}\n        phase={phase}\n        discardTrashState={discardTrashState}\n        discardTrashQueue={discardTrashQueue}\n        setDiscardTrashQueue={setDiscardTrashQueue}\n        deck={deck}\n        setModalContent={setModalContent}\n        setShowModal={setShowModal}\n        discard={discard}\n        playAllTreasure={playAllTreasure}\n        discardTrashCards={discardTrashCards}\n        startGame={startGame}\n        nextPhase={nextPhase}\n      />\n      <div className=\"hand\">\n        <CardDisplay\n          altKey={altKey}\n          stacked={true}\n          sort={true}\n          cards={hand}\n          phase={phase}\n          onClick={discardTrashState? discardTrashCard : nextPhase}\n          discardTrashState={discardTrashState}\n          actionSupply={actionSupply}\n          restriction={discardTrashState? discardTrashState.restriction : undefined}\n          cardQueue={discardTrashQueue}\n        />\n      </div>\n      <Modal\n        show={menuScreen? true : false}\n        setShow={() => {}}\n        children={menuScreen}\n      />\n      <CurrentModal\n        showModal={showModal}\n        setShowModal={setShowModal}\n        altKey={altKey}\n        modalContent={modalContent}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { generateLog } from './printLog';\nimport rollover from './rollover';\nimport cleanup from './cleanup';\n\nexport default (turnObject, setActionSupply) => {\n  const nextAction = turnObject.discardTrashState.next[0];\n  let newCoin = turnObject.treasure;\n  switch (nextAction) {\n    case 'draw':\n      let rolloverCards;\n      const newSize = !isNaN(turnObject.discardTrashState.next[1])? turnObject.discardTrashState.next[1] : turnObject.discardTrashQueue.length;\n      [rolloverCards, turnObject.deck, turnObject.discard] = rollover(newSize, turnObject.deck, turnObject.discard);\n      turnObject = {...turnObject,\n        hand: turnObject.hand.concat(rolloverCards),\n        logs: turnObject.logs.concat(generateLog(turnObject.gameState, [{name: 'Card'}], 'draws', turnObject.discardTrashQueue.length, true))\n      };\n      turnObject = cleanup(turnObject);\n      break;\n    case 'supply':\n      const supplyMsg = turnObject.discardTrashState.card.supply.split(' ');\n      newCoin = supplyMsg[0] === 'discardTrash'? turnObject.discardTrashQueue[0].cost + parseInt(supplyMsg[1]): supplyMsg[0];\n      setActionSupply({\n        treasure: turnObject.treasure,\n        count: turnObject.discardTrashState.amount,\n        restriction: supplyMsg[2],\n        destination: supplyMsg[2]? supplyMsg[2] : 'discard'\n      });\n      turnObject.discardTrashQueue = [];\n      break;\n    default:\n  };\n  return {...turnObject, treasure: newCoin};\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}